
EX_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000039c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000069f  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 00 	call	0x108	; 0x108 <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT0_Init>:
#include <avr/interrupt.h>


/* INT0 enable and configurations */
void INT0_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1<<7) ;            // Reset Global Inturrupt Enable Bit
  74:	af e5       	ldi	r26, 0x5F	; 95
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ef e5       	ldi	r30, 0x5F	; 95
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8f 77       	andi	r24, 0x7F	; 127
  80:	8c 93       	st	X, r24
	DDRD &= ~(1<<2) ;            // INT0 Input
  82:	a1 e3       	ldi	r26, 0x31	; 49
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e1 e3       	ldi	r30, 0x31	; 49
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	8c 93       	st	X, r24
	SREG |= (1<<7) ;             // 1 - Set Global Inturrupt Enable Bit
  90:	af e5       	ldi	r26, 0x5F	; 95
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	ef e5       	ldi	r30, 0x5F	; 95
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8c 93       	st	X, r24
	GICR |=(1<<6) ;              // 2 - Set INT0 Enable Bit
  9e:	ab e5       	ldi	r26, 0x5B	; 91
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	eb e5       	ldi	r30, 0x5B	; 91
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	8c 93       	st	X, r24
	MCUCR |= (1<<0) | (1<<1) ;   //3 - Rising Edge
  ac:	a5 e5       	ldi	r26, 0x55	; 85
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e5 e5       	ldi	r30, 0x55	; 85
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	8c 93       	st	X, r24
}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <__vector_1>:

/* ISR For INT0 */
ISR(INT0_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	df 93       	push	r29
  d8:	cf 93       	push	r28
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	PORTC = PORTC ^(1<<0) ; // Toggle LED
  de:	a5 e3       	ldi	r26, 0x35	; 53
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e5 e3       	ldi	r30, 0x35	; 53
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	89 27       	eor	r24, r25
  ec:	8c 93       	st	X, r24
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:


int main(void){
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1<<0) ;   // LED output
 110:	a4 e3       	ldi	r26, 0x34	; 52
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e4 e3       	ldi	r30, 0x34	; 52
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	8c 93       	st	X, r24
	PORTC &= ~(1<<0) ; // LED OFF at the Beginning
 11e:	a5 e3       	ldi	r26, 0x35	; 53
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e5 e3       	ldi	r30, 0x35	; 53
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	8c 93       	st	X, r24
	INT0_Init() ;
 12c:	0e 94 36 00 	call	0x6c	; 0x6c <INT0_Init>
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x28>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
