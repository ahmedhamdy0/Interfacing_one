
ex_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000036c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000067a  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
		- In Case no switches are pressed  .. Both LEDs are OFF .
*/

#include <avr/io.h>
int main()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Code */
	DDRB &= ~(1<<0) ;  // B0 input (switch 1)
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
   	DDRB &= ~(1<<1) ;  // B1 input (switch 2)
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24
	DDRC |= (1<<0) | (1<<1) ; // C0 (First LED) , C1 (Second LED )  Outputs
  90:	a4 e3       	ldi	r26, 0x34	; 52
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	8c 93       	st	X, r24
	PORTC &= ~( 1<<0) ;   // First LED OFF
  9e:	a5 e3       	ldi	r26, 0x35	; 53
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e5 e3       	ldi	r30, 0x35	; 53
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8c 93       	st	X, r24
	PORTC &= ~(1<<1) ; // Second LED OFF
  ac:	a5 e3       	ldi	r26, 0x35	; 53
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e5 e3       	ldi	r30, 0x35	; 53
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	8c 93       	st	X, r24

	/* Application Code */
	while(1)
	{
		//  switch one chec
		if(PINB &(1<<0) )
  ba:	e6 e3       	ldi	r30, 0x36	; 54
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 2f       	mov	r24, r24
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	90 70       	andi	r25, 0x00	; 0
  c8:	88 23       	and	r24, r24
  ca:	41 f0       	breq	.+16     	; 0xdc <main+0x70>
		{
			PORTC |= (1<<0) ; // LED ONE ONE
  cc:	a5 e3       	ldi	r26, 0x35	; 53
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e5 e3       	ldi	r30, 0x35	; 53
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8c 93       	st	X, r24
  da:	07 c0       	rjmp	.+14     	; 0xea <main+0x7e>
		}
		else{
			PORTC &= ~(1<<0) ; // LED ONE OFF
  dc:	a5 e3       	ldi	r26, 0x35	; 53
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e5 e3       	ldi	r30, 0x35	; 53
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	8c 93       	st	X, r24
		}
		//-----------------------
		// check second switch
		if( PINB &(1<<1) )
  ea:	e6 e3       	ldi	r30, 0x36	; 54
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	82 70       	andi	r24, 0x02	; 2
  f6:	90 70       	andi	r25, 0x00	; 0
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	41 f0       	breq	.+16     	; 0x10c <main+0xa0>
		{
			PORTC |= (1<<1) ; // LED TWO ON
  fc:	a5 e3       	ldi	r26, 0x35	; 53
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e5 e3       	ldi	r30, 0x35	; 53
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24
 10a:	d7 cf       	rjmp	.-82     	; 0xba <main+0x4e>
		}
		else{
			PORTC &=~(1<<1 ) ; // LED TWO OFF
 10c:	a5 e3       	ldi	r26, 0x35	; 53
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e5 e3       	ldi	r30, 0x35	; 53
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	8c 93       	st	X, r24
 11a:	cf cf       	rjmp	.-98     	; 0xba <main+0x4e>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
